package edu.ust.cisc;

import java.util.Iterator;

public class CiscArrayList<E> implements CiscList<E> {

    private static final int DEFAULT_CAPACITY = 10;
    private E[] elementData;
    private int size;


    public CiscArrayList(){
        this.elementData = (E[])new Object[DEFAULT_CAPACITY];
    }
    public CiscArrayList(int initialCapacity){
    if (initialCapacity<-1) {throw new IllegalArgumentException();}
    else {this.elementData = (E[])new Object[initialCapacity];}
    }
    @Override
    public int size() {
        return this.size;
    }

    @Override
    public boolean isEmpty() {
        return this.size == 0;
    }

    @Override
    public boolean contains(Object o) {
        for(int i=0;i<size;i++){
            if (elementData[i].equals(o)){return true;}
        }
        return false;
    }

    @Override
    public Iterator<E> iterator() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Object[] toArray() {
        Object[] arr = new Object[size];
        for (int i=0;i<size;i++){
            arr[i]=elementData[i];
        }
        return arr;
    }

    @Override
    public boolean add(E e) {
       ensureCapacity(this.size+1);
       elementData[this.size] = e;
        size++;
        return true;
    }

    @Override
    public boolean remove(Object o) {
        for (int i=0; i<size;i++){
            if(elementData[i].equals(o)){
                for(int j=i;j<=size-2;j++){
                    elementData[j]=elementData[j+1];
                }
                elementData[--size]= null;

                return true;
            }
        }
        return false;
    }

    @Override
    public void clear() {
        for(int i=0;i<size;i++){
            elementData[i] = null;
        }
        size =0;
    }

    @Override
    public E get(int index) {
        if (index>size-1) { throw new IndexOutOfBoundsException();}
        else { return elementData[index];}

    }

    @Override
    public E set(int index, E element) {
        if (index>size-1) { throw new IndexOutOfBoundsException();}
        else { E o= element;
                elementData[index]=element;
            return o;
        }

    }

    @Override
    public void add(int index, E element) {
        if (index>size) { throw new IndexOutOfBoundsException();}
        else { for (int i=size;i>index;i--){elementData[i]=elementData[i-1];}
        elementData[index]=element;
            size++;
        }
    }

    @Override
    public E remove(int index) {
        E o=elementData[index];
        if (index>=size){throw new IndexOutOfBoundsException();}
        else {
            for(int i=index;i<=size-2;i++){
                elementData[i]=elementData[i+1];
            }
            elementData[--size] = null;
        }
            return o;
    }

    @Override
    public int indexOf(Object o) {
        for (int i=0; i<size;i++){
            if(elementData[i].equals(o)){
                return i;
            }
        }
        return -1;

    }
    public void ensureCapacity(int minimumCapacity){
        if(minimumCapacity> elementData.length){if((elementData.length*2)>minimumCapacity){
            E[] arr = (E[]) new Object[minimumCapacity*2-1];
            for (int i=0;i<size;i++){
                arr[i]=elementData[i];}




        elementData =arr;
        }
        else {
            E[] arr = (E[]) new Object[minimumCapacity];
                for (int i=0;i<size;i++){
                    arr[i]=elementData[i];
        }elementData =arr;




        }
    }
}}
