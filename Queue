package edu.ust.cisc;

import java.util.EmptyStackException;
import java.util.Iterator;

public class CiscQueue<E> implements CiscCollection<E>{

    public static final int DEFAULT_CAPACITY = 10;
    private E[] elementData;
    private int frontIndex;
    private int rearIndex;
    public CiscQueue(){
        this(DEFAULT_CAPACITY);
    }
    public CiscQueue(int initialCapacity){
        if(initialCapacity < 0){
            throw new IllegalArgumentException();
        }
        elementData = (E[]) new Object[initialCapacity];
        frontIndex = -1;
        rearIndex = -1;
    }
    public boolean offer(E item) {
        if(rearIndex== elementData.length-1&&frontIndex>0){
            elementData[0]=item;
            rearIndex=0;
            return true;
        } else  if(rearIndex== elementData.length-1&&elementData[0]!=null){
            ensureCapacity(elementData.length+1);
            elementData[rearIndex+1]=item;
            rearIndex++;
            return true;
        } else
        {

        elementData[rearIndex+1]=item;
        rearIndex++;
        return true;}
    }
    public E poll(){
        if(frontIndex == -1){
            return null;
        } else {
            E item = elementData[frontIndex];
            elementData[frontIndex]=null;
            if(frontIndex==rearIndex){frontIndex=-1; rearIndex=-1;}
         else    if(frontIndex== elementData.length-1){frontIndex=0;}
           else {  frontIndex++;}
            return item;
        }

    }
    public E peek() {
        if(frontIndex == -1){
            return null;
        } else {
            return elementData[frontIndex];
        }
    }
    @Override
    public int size() {
        if(rearIndex > frontIndex){
            return rearIndex - frontIndex +1;
        }else if(frontIndex > rearIndex) {
            return elementData.length - (frontIndex - rearIndex) +1;
        }else if(frontIndex == -1){
            return 0;
        } else {
            return 1;
        }
    }

    @Override
    public boolean isEmpty() {
        return frontIndex == -1;
    }

    @Override
    public boolean contains(Object o) {
        if(!isEmpty()) {
            if(rearIndex == frontIndex){
                if(elementData[frontIndex].equals(o)){
                    return true;
                }
            }
            else if(rearIndex > frontIndex){

                for (int i = frontIndex; i <= rearIndex; i++) {
                    if(elementData[i].equals(o)){
                        return true;
                    }
                }
               }
            else if(rearIndex < frontIndex){

                for (int i = frontIndex; i < elementData.length; i++) {
                    if(elementData[i].equals(o)){
                        return true;
                    }
                }
                for (int i =0; i <= rearIndex; i++) {
                    if(elementData[i].equals(o)){
                        return true;
                    }
                }
            }
        }
    return false;}



    @Override
    public Iterator<E> iterator() {
        return new CiscQueueIterator();
   }

    @Override
    public Object[] toArray() {Object[] arr = new Object[size()];
        if(!isEmpty()) {
            if(rearIndex == frontIndex){
                arr[0]=elementData[frontIndex];
            }
            else if(rearIndex > frontIndex){
        int j=0;
        for (int i = frontIndex; i <= rearIndex; i++) {
            arr[j] = elementData[i];
            j++;
        }
        return arr;}
        else if(rearIndex < frontIndex){
                int j=0;
                for (int i = frontIndex; i < elementData.length; i++) {
                    arr[j] = elementData[i];
                    j++;
                }
                for (int i =0; i <= rearIndex; i++) {
                    arr[j] = elementData[i];
                    j++;
                }
            }
        }

        return arr;
    }

    @Override
    public void clear() {
        if(!isEmpty()) {
            int i = frontIndex;
            while(i != rearIndex){
                elementData[i] = null;
                i = (i+1)%elementData.length;
            }
            elementData[rearIndex] = null;
            frontIndex = -1;
            rearIndex = -1;
        }
    }
    private void ensureCapacity(int minCapacity){
        if(minCapacity > elementData.length) {
            int size = size();
            if((elementData.length*2)>minCapacity) {
                E[] newData = (E[]) new Object[minCapacity*2-1];
                int j = frontIndex;
                for (int i = 0; i < elementData.length-1; i++){
                    newData[i] = elementData[j];
                    j = (j+1) % elementData.length;
                }
                elementData = newData;
                rearIndex = size -1;
                frontIndex = 0;
            } else {
                E[] newData = (E[]) new Object[minCapacity];
                int j = frontIndex;
                for (int i = 0; i < size(); i++){
                    newData[i] = elementData[j];
                    j = (j+1) % elementData.length;
                }
                elementData = newData;
                rearIndex = size -1;
                frontIndex = 0;
            }
        }
    }


   private class CiscQueueIterator implements Iterator<E> {



        private int numElementsReturned;
       public boolean hasNext()  { return numElementsReturned < size(); }


        public E next() {

            int nextIndex = (frontIndex+ numElementsReturned )%elementData.length;
        E returnValue = elementData[nextIndex];
        numElementsReturned+=1;
        return returnValue;
}}}
