package edu.ust.cisc;

import java.util.EmptyStackException;
import java.util.Iterator;

public class CiscStack<E> implements CiscCollection<E> {

    public static final int DEFAULT_CAPACITY = 10;
    private E[] elementData;
    private int size;

    public CiscStack() {
        this(DEFAULT_CAPACITY);
    }

    public CiscStack(int initialCapacity) {
        if (initialCapacity < 0) {
            throw new IllegalArgumentException();
        }
        elementData = (E[]) new Object[initialCapacity];
        size = 0;
    }

    public E peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        E item = elementData[size - 1];
        return item;
    }

    public E pop() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        E item = elementData[size - 1];
        elementData[size - 1] = null;
        size--;
        return item;
    }

    public void push(E item) {
        ensureCapacity(size + 1);
        elementData[size] = item;
        size++;
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    @Override
    public boolean contains(Object o) {
        for (int i = 0; i < size; i++) {
            if (elementData[i].equals(o)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Iterator<E> iterator() {
        return new CiscStackIterator();
    }

    @Override
    public Object[] toArray() {
        Object[] arr = new Object[size];
        int j = 0;
        for (int i = size - 1; i >= 0; i--) {
            arr[j] = elementData[i];
            j++;
        }
        return arr;
    }

    @Override
    public void clear() {
        for (int i = 0; i < size; i++) {
            elementData[i] = null;

        }
        size = 0;
    }

    private void ensureCapacity(int minimumCapacity) {
        if (minimumCapacity > elementData.length) {
            if ((elementData.length * 2) > minimumCapacity) {
                E[] arr = (E[]) new Object[minimumCapacity * 2 - 1];
                for (int i = 0; i < size; i++) {
                    arr[i] = elementData[i];
                }


                elementData = arr;
            } else {
                E[] arr = (E[]) new Object[minimumCapacity];
                for (int i = 0; i < size; i++) {
                    arr[i] = elementData[i];
                }
                elementData = arr;


            }
        }
    }
    private class CiscStackIterator<E> implements Iterator<E> {
        private int nextIndex;

        public CiscStackIterator() {
            nextIndex = 0;
        }
        @Override
        public boolean hasNext() {
            return nextIndex < size;
        }
        @Override
        public E next() {
            if(isEmpty()){
                throw new EmptyStackException();
            }
            E item = (E) elementData[size-1];
            elementData[size-1]=null;
            size--;
            return item;
        }
    }
}

